def barreraVirtualCubPROVAsetTCP():
  global _hidden_verificationVariable=0
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,0.0,0.13501,0.0,0.0,0.0])
  set_target_payload(0.820000, [0.001000, -0.004000, 0.047000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000])
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(True, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(24)
  global Pallet_1_cnt_1=21
  global Pallet_1_cnt=7
  global Plane_1=p[0.0,-0.4,0.3,1.5707963267948972,2.8855060405826856E-16,-2.885506040582686E-16]
  step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a = 0.0
  thread Step_Counter_Thread_b25763c0_9da4_4999_86c1_d32637677ddc():
    while (True):
      step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a = step_count_21a171f8_186e_4d2c_acbe_45a902ca3c9a + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_b25763c0_9da4_4999_86c1_d32637677ddc()
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  def rectificarPosicio():
    $ 58 "rectificarPosicio" "noBreak"
    $ 59 "'Subprograma cridat per tal de fer un moviment amb una direccio.'"
    # 'Subprograma cridat per tal de fer un moviment amb una direccio.'
    $ 60 "'Abans de cridar el subprograma s'ha d'haver obtingut el valor de la posicio actual.'"
    # 'Abans de cridar el subprograma s'ha d'haver obtingut el valor de la posicio actual.'
    $ 61 "'Generem el vector director del punt actual al centre.'"
    # 'Generem el vector director del punt actual al centre.'
    $ 62 "vectorDir≔[centre[0]-posAct[0],centre[1]-posAct[1],centre[2]-posAct[2]]"
    global vectorDir=[centre[0]-posAct[0],centre[1]-posAct[1],centre[2]-posAct[2]]
    $ 63 "'Donem marge de temps per pesar al software.'"
    # 'Donem marge de temps per pesar al software.'
    $ 64 "Wait: 0.01"
    sleep(0.01)
    $ 65 "'Ens movem en direccio el centre fins que s'hagi recorregut una distancia determinada.'"
    # 'Ens movem en direccio el centre fins que s'hagi recorregut una distancia determinada.'
    $ 66 "MoveL"
    $ 67 "Direction: Base"
    global move_thread_flag_67=0
    thread move_thread_67():
      enter_critical
      move_thread_flag_67 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], vectorDir, 0.001)
      movel(towardsPos, a=0.12, v=0.02)
      move_thread_flag_67 = 2
      exit_critical
    end
    move_thread_flag_67 = 0
    move_thread_han_67 = run move_thread_67()
    while (True):
      sleep(1.0E-10)
      if (move_thread_flag_67 > 1):
        join move_thread_han_67
        $ 68 "Until (distance)"
        break
      end
      sync()
    end
    $ 69 "'Tornem a activar el moviment lliure.'"
    # 'Tornem a activar el moviment lliure.'
    $ 70 "freedrive_mode()"
    freedrive_mode()
  end
  $ 71 "Thread_1"
  thread Thread_1():
    while (True):
      $ 72 "'Obtenim les posicions del TCP, el toolFlange i el punt del mig.'"
      # 'Obtenim les posicions del TCP, el toolFlange i el punt del mig.'
      $ 73 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 74 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 75 "llistaPosTCP≔get_actual_tcp_pose()"
      global llistaPosTCP= get_actual_tcp_pose ()
      $ 76 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 77 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 78 "llistaPosFlange≔get_actual_tcp_pose()"
      global llistaPosFlange= get_actual_tcp_pose ()
      $ 79 "llistaPosMig≔p[(llistaPosTCP[0]+llistaPosFlange[0])/2,(llistaPosTCP[1]+llistaPosFlange[1])/2,(llistaPosTCP[2]+llistaPosFlange[2])/2,llistaPosTCP[3],llistaPosTCP[4],llistaPosTCP[5]]"
      global llistaPosMig=p[(llistaPosTCP[0]+llistaPosFlange[0])/2,(llistaPosTCP[1]+llistaPosFlange[1])/2,(llistaPosTCP[2]+llistaPosFlange[2])/2,llistaPosTCP[3],llistaPosTCP[4],llistaPosTCP[5]]
      $ 80 "'Comprovem eixos X'"
      # 'Comprovem eixos X'
      $ 81 "If llistaPosTCP[0]≥(p1[0]-radiTCP) or llistaPosTCP[0]≤(p2[0]+radiTCP)"
      global thread_flag_81=0
      thread Thread_if_81():
        $ 82 "surtTCP≔ True "
        global surtTCP=  True  
        thread_flag_81 = 1
      end
      if (llistaPosTCP[0] >= (p1[0]-radiTCP)  or  llistaPosTCP[0] <= (p2[0]+radiTCP)):
        global thread_handler_81=run Thread_if_81()
        while (thread_flag_81 == 0):
          if not(llistaPosTCP[0] >= (p1[0]-radiTCP)  or  llistaPosTCP[0] <= (p2[0]+radiTCP)):
            kill thread_handler_81
            thread_flag_81 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_81 = 2
      end
      $ 83 "If llistaPosFlange[0]≥(p1[0]-radiFlange) or llistaPosFlange[0]≤(p2[0]+radiFlange)"
      global thread_flag_83=0
      thread Thread_if_83():
        $ 84 "surtToolFlange≔ True "
        global surtToolFlange=  True  
        thread_flag_83 = 1
      end
      if (llistaPosFlange[0] >= (p1[0]-radiFlange)  or  llistaPosFlange[0] <= (p2[0]+radiFlange)):
        global thread_handler_83=run Thread_if_83()
        while (thread_flag_83 == 0):
          if not(llistaPosFlange[0] >= (p1[0]-radiFlange)  or  llistaPosFlange[0] <= (p2[0]+radiFlange)):
            kill thread_handler_83
            thread_flag_83 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_83 = 2
      end
      $ 85 "If llistaPosMig[0]≥(p1[0]-radiMig) or llistaPosMig[0]≤(p2[0]+radiMig)"
      global thread_flag_85=0
      thread Thread_if_85():
        $ 86 "surtMig≔ True "
        global surtMig=  True  
        thread_flag_85 = 1
      end
      if (llistaPosMig[0] >= (p1[0]-radiMig)  or  llistaPosMig[0] <= (p2[0]+radiMig)):
        global thread_handler_85=run Thread_if_85()
        while (thread_flag_85 == 0):
          if not(llistaPosMig[0] >= (p1[0]-radiMig)  or  llistaPosMig[0] <= (p2[0]+radiMig)):
            kill thread_handler_85
            thread_flag_85 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_85 = 2
      end
      $ 87 "'Comprovem eixos Y'"
      # 'Comprovem eixos Y'
      $ 88 "If llistaPosTCP[1]≤(p1[1]+radiTCP) or llistaPosTCP[1]≥(p2[1]-radiTCP)"
      global thread_flag_88=0
      thread Thread_if_88():
        $ 89 "surtTCP≔ True "
        global surtTCP=  True  
        thread_flag_88 = 1
      end
      if (llistaPosTCP[1] <= (p1[1]+radiTCP)  or  llistaPosTCP[1] >= (p2[1]-radiTCP)):
        global thread_handler_88=run Thread_if_88()
        while (thread_flag_88 == 0):
          if not(llistaPosTCP[1] <= (p1[1]+radiTCP)  or  llistaPosTCP[1] >= (p2[1]-radiTCP)):
            kill thread_handler_88
            thread_flag_88 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_88 = 2
      end
      $ 90 "If llistaPosFlange[1]≤(p1[1]+radiFlange) or llistaPosFlange[1]≥(p2[1]-radiFlange)"
      global thread_flag_90=0
      thread Thread_if_90():
        $ 91 "surtToolFlange≔ True "
        global surtToolFlange=  True  
        thread_flag_90 = 1
      end
      if (llistaPosFlange[1] <= (p1[1]+radiFlange)  or  llistaPosFlange[1] >= (p2[1]-radiFlange)):
        global thread_handler_90=run Thread_if_90()
        while (thread_flag_90 == 0):
          if not(llistaPosFlange[1] <= (p1[1]+radiFlange)  or  llistaPosFlange[1] >= (p2[1]-radiFlange)):
            kill thread_handler_90
            thread_flag_90 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_90 = 2
      end
      $ 92 "If llistaPosMig[1]≤(p1[1]+radiMig) or llistaPosMig[1]≥(p2[1]-radiMig)"
      global thread_flag_92=0
      thread Thread_if_92():
        $ 93 "surtMig≔ True "
        global surtMig=  True  
        thread_flag_92 = 1
      end
      if (llistaPosMig[1] <= (p1[1]+radiMig)  or  llistaPosMig[1] >= (p2[1]-radiMig)):
        global thread_handler_92=run Thread_if_92()
        while (thread_flag_92 == 0):
          if not(llistaPosMig[1] <= (p1[1]+radiMig)  or  llistaPosMig[1] >= (p2[1]-radiMig)):
            kill thread_handler_92
            thread_flag_92 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_92 = 2
      end
      $ 94 "'Comprovem eixos Z'"
      # 'Comprovem eixos Z'
      $ 95 "If llistaPosTCP[2]≥(p1[2]-radiTCP) or llistaPosTCP[2]≤(p2[2]+radiTCP)"
      global thread_flag_95=0
      thread Thread_if_95():
        $ 96 "surtTCP≔ True "
        global surtTCP=  True  
        thread_flag_95 = 1
      end
      if (llistaPosTCP[2] >= (p1[2]-radiTCP)  or  llistaPosTCP[2] <= (p2[2]+radiTCP)):
        global thread_handler_95=run Thread_if_95()
        while (thread_flag_95 == 0):
          if not(llistaPosTCP[2] >= (p1[2]-radiTCP)  or  llistaPosTCP[2] <= (p2[2]+radiTCP)):
            kill thread_handler_95
            thread_flag_95 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_95 = 2
      end
      $ 97 "If llistaPosFlange[2]≥(p1[2]-radiFlange) or llistaPosFlange[2]≤(p2[2]+radiFlange)"
      global thread_flag_97=0
      thread Thread_if_97():
        $ 98 "surtToolFlange≔ True "
        global surtToolFlange=  True  
        thread_flag_97 = 1
      end
      if (llistaPosFlange[2] >= (p1[2]-radiFlange)  or  llistaPosFlange[2] <= (p2[2]+radiFlange)):
        global thread_handler_97=run Thread_if_97()
        while (thread_flag_97 == 0):
          if not(llistaPosFlange[2] >= (p1[2]-radiFlange)  or  llistaPosFlange[2] <= (p2[2]+radiFlange)):
            kill thread_handler_97
            thread_flag_97 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_97 = 2
      end
      $ 99 "If llistaPosMig[2]≥(p1[2]-radiMig) or llistaPosMig[2]≤(p2[2]+radiMig)"
      global thread_flag_99=0
      thread Thread_if_99():
        $ 100 "surtMig≔ True "
        global surtMig=  True  
        thread_flag_99 = 1
      end
      if (llistaPosMig[2] >= (p1[2]-radiMig)  or  llistaPosMig[2] <= (p2[2]+radiMig)):
        global thread_handler_99=run Thread_if_99()
        while (thread_flag_99 == 0):
          if not(llistaPosMig[2] >= (p1[2]-radiMig)  or  llistaPosMig[2] <= (p2[2]+radiMig)):
            kill thread_handler_99
            thread_flag_99 = 2
          else:
            sync()
          end
        end
      else:
        thread_flag_99 = 2
      end
      $ 101 "Wait: 0.01"
      sleep(0.01)
    end
  end
  threadId_Thread_1 = run Thread_1()
  $ 2 "Robot Program"
  $ 3 "'Definim les variables surtTCP, surtToolFlange i surtMig com a False per indicar quin surt.'"
  # 'Definim les variables surtTCP, surtToolFlange i surtMig com a False per indicar quin surt.'
  $ 4 "surtTCP≔ False "
  global surtTCP=  False  
  $ 5 "surtToolFlange≔ False "
  global surtToolFlange=  False  
  $ 6 "surtMig≔ False "
  global surtMig=  False  
  $ 7 "'Definim els radis de les esferes del TCP, el toolFlange i el punt mig.'"
  # 'Definim els radis de les esferes del TCP, el toolFlange i el punt mig.'
  $ 8 "radiTCP≔0.02"
  global radiTCP=0.02
  $ 9 "radiFlange≔0.02"
  global radiFlange=0.02
  $ 10 "radiMig≔0.02"
  global radiMig=0.02
  $ 11 "'Agafem els dos punts necessaris per fer un cub perfecte.'"
  # 'Agafem els dos punts necessaris per fer un cub perfecte.'
  $ 12 "p1≔p[0.119,-0.546,0.484,0,0,0]"
  global p1=p[0.119,-0.546,0.484,0,0,0]
  $ 13 "p2≔p[-0.241,-0.190,0.133,0,0,0]"
  global p2=p[-0.241,-0.190,0.133,0,0,0]
  $ 14 "'Calculem el punt central.'"
  # 'Calculem el punt central.'
  $ 15 "centre≔p[(p1[0]+p2[0])/2,(p1[1]+p2[1])/2,(p1[2]+p2[2])/2,0,0,0]"
  global centre=p[(p1[0]+p2[0])/2,(p1[1]+p2[1])/2,(p1[2]+p2[2])/2,0,0,0]
  $ 16 "'Activem el moviment lliure.'"
  # 'Activem el moviment lliure.'
  $ 17 "freedrive_mode()"
  freedrive_mode()
  $ 18 "Loop"
  while (True):
    $ 19 "'Surt el TCP, el Flange o el punt mig.'"
    # 'Surt el TCP, el Flange o el punt mig.'
    $ 20 "If surtTCP≟ True "
    global thread_flag_20=0
    thread Thread_if_20():
      $ 21 "'Aturem el moviment lliure.'"
      # 'Aturem el moviment lliure.'
      $ 22 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 23 "'Obtenim la posicio actual del TCP.'"
      # 'Obtenim la posicio actual del TCP.'
      $ 24 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 25 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 26 "posAct≔get_actual_tcp_pose()"
      global posAct= get_actual_tcp_pose ()
      $ 27 "'Cridem el subprograma per rectificar la posicio.'"
      # 'Cridem el subprograma per rectificar la posicio.'
      $ 28 "Call rectificarPosicio"
      rectificarPosicio()
      $ 29 "'Retornem les variables a False i reactivem el moviment lliure.'"
      # 'Retornem les variables a False i reactivem el moviment lliure.'
      $ 30 "surtTCP≔ False "
      global surtTCP=  False  
      thread_flag_20 = 1
    end
    if (surtTCP ==   True  ):
      global thread_handler_20=run Thread_if_20()
      while (thread_flag_20 == 0):
        if not(surtTCP ==   True  ):
          kill thread_handler_20
          thread_flag_20 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_20 = 2
    end
    $ 31 "If surtToolFlange≟ True "
    global thread_flag_31=0
    thread Thread_if_31():
      $ 32 "'Aturem el moviment lliure.'"
      # 'Aturem el moviment lliure.'
      $ 33 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 34 "'Obtenim la posicio actual del cap de l eina.'"
      # 'Obtenim la posicio actual del cap de l eina.'
      $ 35 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 36 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 37 "posAct≔get_actual_tcp_pose()"
      global posAct= get_actual_tcp_pose ()
      $ 38 "'Cridem el subprograma per rectificar la posicio.'"
      # 'Cridem el subprograma per rectificar la posicio.'
      $ 39 "Call rectificarPosicio"
      rectificarPosicio()
      $ 40 "'Retornem les variables a False i reactivem el moviment lliure.'"
      # 'Retornem les variables a False i reactivem el moviment lliure.'
      $ 41 "surtToolFlange≔ False "
      global surtToolFlange=  False  
      thread_flag_31 = 1
    end
    if (surtToolFlange ==   True  ):
      global thread_handler_31=run Thread_if_31()
      while (thread_flag_31 == 0):
        if not(surtToolFlange ==   True  ):
          kill thread_handler_31
          thread_flag_31 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_31 = 2
    end
    $ 42 "If surtMig≟ True "
    global thread_flag_42=0
    thread Thread_if_42():
      $ 43 "'Aturem el moviment lliure.'"
      # 'Aturem el moviment lliure.'
      $ 44 "end_freedrive_mode()"
      end_freedrive_mode()
      $ 45 "'Obtenim les posicions actuals de la brida i el TCP per calcular el punt del mig.'"
      # 'Obtenim les posicions actuals de la brida i el TCP per calcular el punt del mig.'
      $ 46 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.071,-0.14801,0.1176,0.0,0.0,0.0])
      $ 47 "Set Payload: Payload_TCPEina 0.0s"
      set_target_payload(0.820000, [0.004000, -0.009000, 0.048000], [0.001106, 0.001106, 0.001106, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 48 "tcpAct≔get_actual_tcp_pose()"
      global tcpAct= get_actual_tcp_pose ()
      $ 49 "Set DO[0]=On"
      set_standard_digital_out(0, True)
      set_tcp(p[-0.07237805867785846,0.03487823235901087,0.11496915990614842,0.0,0.0,0.0])
      $ 50 "Set Payload: Payload_CapEina 0.0s"
      set_target_payload(0.840000, [-0.003000, -0.016000, 0.041000], [0.001151, 0.001151, 0.001151, 0.000000, 0.000000, 0.000000], 0.000000)
      $ 51 "flangeAct≔get_actual_tcp_pose()"
      global flangeAct= get_actual_tcp_pose ()
      $ 52 "posAct≔p[(tcpAct[0]+flangeAct[0])/2,(tcpAct[1]+flangeAct[1])/2,(tcpAct[2]+flangeAct[2])/2,tcpAct[3],tcpAct[4],tcpAct[5]]"
      global posAct=p[(tcpAct[0]+flangeAct[0])/2,(tcpAct[1]+flangeAct[1])/2,(tcpAct[2]+flangeAct[2])/2,tcpAct[3],tcpAct[4],tcpAct[5]]
      $ 53 "'Cridem el subprograma per rectificar la posicio.'"
      # 'Cridem el subprograma per rectificar la posicio.'
      $ 54 "Call rectificarPosicio"
      rectificarPosicio()
      $ 55 "'Retornem les variables a False i reactivem el moviment lliure.'"
      # 'Retornem les variables a False i reactivem el moviment lliure.'
      $ 56 "surtMig≔ False "
      global surtMig=  False  
      thread_flag_42 = 1
    end
    if (surtMig ==   True  ):
      global thread_handler_42=run Thread_if_42()
      while (thread_flag_42 == 0):
        if not(surtMig ==   True  ):
          kill thread_handler_42
          thread_flag_42 = 2
        else:
          sync()
        end
      end
    else:
      thread_flag_42 = 2
    end
    $ 57 "Wait: 0.01"
    sleep(0.01)
  end
end
